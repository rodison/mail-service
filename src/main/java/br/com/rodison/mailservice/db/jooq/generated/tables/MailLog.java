/*
 * This file is generated by jOOQ.
 */
package br.com.rodison.mailservice.db.jooq.generated.tables;


import br.com.rodison.mailservice.db.jooq.generated.Indexes;
import br.com.rodison.mailservice.db.jooq.generated.Keys;
import br.com.rodison.mailservice.db.jooq.generated.Public;
import br.com.rodison.mailservice.db.jooq.generated.tables.records.MailLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MailLog extends TableImpl<MailLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mail_log</code>
     */
    public static final MailLog MAIL_LOG = new MailLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailLogRecord> getRecordType() {
        return MailLogRecord.class;
    }

    /**
     * The column <code>public.mail_log.id</code>.
     */
    public final TableField<MailLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.mail_log.id_registered_consumer</code>.
     */
    public final TableField<MailLogRecord, UUID> ID_REGISTERED_CONSUMER = createField(DSL.name("id_registered_consumer"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.mail_log.from_mail</code>.
     */
    public final TableField<MailLogRecord, String> FROM_MAIL = createField(DSL.name("from_mail"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.mail_log.subject</code>.
     */
    public final TableField<MailLogRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mail_log.body</code>.
     */
    public final TableField<MailLogRecord, String> BODY = createField(DSL.name("body"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mail_log.date_create</code>.
     */
    public final TableField<MailLogRecord, LocalDateTime> DATE_CREATE = createField(DSL.name("date_create"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.mail_log.date_update</code>.
     */
    public final TableField<MailLogRecord, LocalDateTime> DATE_UPDATE = createField(DSL.name("date_update"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private MailLog(Name alias, Table<MailLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MailLog(Name alias, Table<MailLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mail_log</code> table reference
     */
    public MailLog(String alias) {
        this(DSL.name(alias), MAIL_LOG);
    }

    /**
     * Create an aliased <code>public.mail_log</code> table reference
     */
    public MailLog(Name alias) {
        this(alias, MAIL_LOG);
    }

    /**
     * Create a <code>public.mail_log</code> table reference
     */
    public MailLog() {
        this(DSL.name("mail_log"), null);
    }

    public <O extends Record> MailLog(Table<O> child, ForeignKey<O, MailLogRecord> key) {
        super(child, key, MAIL_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MAIL_LOG_DT_UPDATE_IX);
    }

    @Override
    public UniqueKey<MailLogRecord> getPrimaryKey() {
        return Keys.MAIL_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<MailLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MAIL_LOG__MAIL_LOG_REG_CONSUMER_FK);
    }

    private transient RegisteredConsumer _registeredConsumer;

    public RegisteredConsumer registeredConsumer() {
        if (_registeredConsumer == null)
            _registeredConsumer = new RegisteredConsumer(this, Keys.MAIL_LOG__MAIL_LOG_REG_CONSUMER_FK);

        return _registeredConsumer;
    }

    @Override
    public MailLog as(String alias) {
        return new MailLog(DSL.name(alias), this);
    }

    @Override
    public MailLog as(Name alias) {
        return new MailLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MailLog rename(String name) {
        return new MailLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MailLog rename(Name name) {
        return new MailLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
