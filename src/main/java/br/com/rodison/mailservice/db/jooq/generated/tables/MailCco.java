/*
 * This file is generated by jOOQ.
 */
package br.com.rodison.mailservice.db.jooq.generated.tables;


import br.com.rodison.mailservice.db.jooq.generated.Indexes;
import br.com.rodison.mailservice.db.jooq.generated.Keys;
import br.com.rodison.mailservice.db.jooq.generated.Public;
import br.com.rodison.mailservice.db.jooq.generated.tables.records.MailCcoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MailCco extends TableImpl<MailCcoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mail_cco</code>
     */
    public static final MailCco MAIL_CCO = new MailCco();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailCcoRecord> getRecordType() {
        return MailCcoRecord.class;
    }

    /**
     * The column <code>public.mail_cco.id</code>.
     */
    public final TableField<MailCcoRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.mail_cco.id_mail_log</code>.
     */
    public final TableField<MailCcoRecord, UUID> ID_MAIL_LOG = createField(DSL.name("id_mail_log"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.mail_cco.to_mail</code>.
     */
    public final TableField<MailCcoRecord, String> TO_MAIL = createField(DSL.name("to_mail"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.mail_cco.date_create</code>.
     */
    public final TableField<MailCcoRecord, LocalDateTime> DATE_CREATE = createField(DSL.name("date_create"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.mail_cco.date_update</code>.
     */
    public final TableField<MailCcoRecord, LocalDateTime> DATE_UPDATE = createField(DSL.name("date_update"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private MailCco(Name alias, Table<MailCcoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MailCco(Name alias, Table<MailCcoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mail_cco</code> table reference
     */
    public MailCco(String alias) {
        this(DSL.name(alias), MAIL_CCO);
    }

    /**
     * Create an aliased <code>public.mail_cco</code> table reference
     */
    public MailCco(Name alias) {
        this(alias, MAIL_CCO);
    }

    /**
     * Create a <code>public.mail_cco</code> table reference
     */
    public MailCco() {
        this(DSL.name("mail_cco"), null);
    }

    public <O extends Record> MailCco(Table<O> child, ForeignKey<O, MailCcoRecord> key) {
        super(child, key, MAIL_CCO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MAIL_CCO_DT_UPDATE_IX);
    }

    @Override
    public UniqueKey<MailCcoRecord> getPrimaryKey() {
        return Keys.MAIL_CCO_PKEY;
    }

    @Override
    public List<ForeignKey<MailCcoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MAIL_CCO__MAIL_CCO_MAIL_LOG_FK);
    }

    private transient MailLog _mailLog;

    public MailLog mailLog() {
        if (_mailLog == null)
            _mailLog = new MailLog(this, Keys.MAIL_CCO__MAIL_CCO_MAIL_LOG_FK);

        return _mailLog;
    }

    @Override
    public MailCco as(String alias) {
        return new MailCco(DSL.name(alias), this);
    }

    @Override
    public MailCco as(Name alias) {
        return new MailCco(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MailCco rename(String name) {
        return new MailCco(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MailCco rename(Name name) {
        return new MailCco(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
