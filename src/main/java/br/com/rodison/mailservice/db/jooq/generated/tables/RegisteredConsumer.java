/*
 * This file is generated by jOOQ.
 */
package br.com.rodison.mailservice.db.jooq.generated.tables;


import br.com.rodison.mailservice.db.jooq.generated.Indexes;
import br.com.rodison.mailservice.db.jooq.generated.Keys;
import br.com.rodison.mailservice.db.jooq.generated.Public;
import br.com.rodison.mailservice.db.jooq.generated.tables.records.RegisteredConsumerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisteredConsumer extends TableImpl<RegisteredConsumerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.registered_consumer</code>
     */
    public static final RegisteredConsumer REGISTERED_CONSUMER = new RegisteredConsumer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisteredConsumerRecord> getRecordType() {
        return RegisteredConsumerRecord.class;
    }

    /**
     * The column <code>public.registered_consumer.id</code>.
     */
    public final TableField<RegisteredConsumerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.registered_consumer.consumer_name</code>.
     */
    public final TableField<RegisteredConsumerRecord, String> CONSUMER_NAME = createField(DSL.name("consumer_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.registered_consumer.date_create</code>.
     */
    public final TableField<RegisteredConsumerRecord, LocalDateTime> DATE_CREATE = createField(DSL.name("date_create"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.registered_consumer.date_update</code>.
     */
    public final TableField<RegisteredConsumerRecord, LocalDateTime> DATE_UPDATE = createField(DSL.name("date_update"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private RegisteredConsumer(Name alias, Table<RegisteredConsumerRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisteredConsumer(Name alias, Table<RegisteredConsumerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.registered_consumer</code> table reference
     */
    public RegisteredConsumer(String alias) {
        this(DSL.name(alias), REGISTERED_CONSUMER);
    }

    /**
     * Create an aliased <code>public.registered_consumer</code> table reference
     */
    public RegisteredConsumer(Name alias) {
        this(alias, REGISTERED_CONSUMER);
    }

    /**
     * Create a <code>public.registered_consumer</code> table reference
     */
    public RegisteredConsumer() {
        this(DSL.name("registered_consumer"), null);
    }

    public <O extends Record> RegisteredConsumer(Table<O> child, ForeignKey<O, RegisteredConsumerRecord> key) {
        super(child, key, REGISTERED_CONSUMER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REGISTERED_CONSUMER_DT_UPDATE_IX, Indexes.REGISTERED_CONSUMER_UK);
    }

    @Override
    public UniqueKey<RegisteredConsumerRecord> getPrimaryKey() {
        return Keys.REGISTERED_CONSUMER_PKEY;
    }

    @Override
    public RegisteredConsumer as(String alias) {
        return new RegisteredConsumer(DSL.name(alias), this);
    }

    @Override
    public RegisteredConsumer as(Name alias) {
        return new RegisteredConsumer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredConsumer rename(String name) {
        return new RegisteredConsumer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredConsumer rename(Name name) {
        return new RegisteredConsumer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
